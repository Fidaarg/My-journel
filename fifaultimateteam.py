# -*- coding: utf-8 -*-
"""FIFAUltimateTeam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qLP4gTL0z7UNradSSsSqF0oOOBYSeB2f
"""

#importing libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math
import io
import plotly.graph_objs as go

from google.colab import files
uploaded = files.upload()

#loading dataset into python environment
df=pd.read_csv(io.BytesIO(uploaded['players_22.csv']))

""" **EDA**"""

#display first 5 rows
df.head(5)

#display information about the dataset
df.info()

#count of rows and columns
df.shape

df.describe()

#display numerical columns
df1=df.select_dtypes(include='number')
df1

#name of numerical columns
columns=df1.columns
columns

#Skill Columns

#Function to convert skill rating at each position.
def skillConverter(val):
    if type(val) == str:
        s1 = val[0:2]
        s2 = val[-1]
        val = int(s1) + int(s2)
        return val
    else:
        return val

skill_columns = ['ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam',
       'ram', 'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm',
       'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb']

for col in skill_columns:
    df[col] = df[col].apply(skillConverter)
    df[col].fillna(0.0, inplace = True)

df.head()

result_st = []
for i in range(len(df['gk'])):
    result_st.append(df.eval(df['gk'][i]))

df['gk'] = result_st

df.head()

"""# Bivariate analysis"""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['potential'], y = df['overall'])
plt.xlabel("potential") 
plt.ylabel("overall")
plt.title("potential & overall", fontsize = 18)
plt.show()

"""There is a positive correlation between overall and potential"""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['shooting'], y = df['overall'])
plt.xlabel("shooting") 
plt.ylabel("overall")
plt.title("shooting & overall", fontsize = 18)
plt.show()

"""As players shooting skill, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['passing'], y = df['overall'])
plt.xlabel("passing") 
plt.ylabel("overall")
plt.title("passing & overall", fontsize = 18)
plt.show()

"""As players passing skill, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['dribbling'], y = df['overall'])
plt.xlabel("dribbling") 
plt.ylabel("overall")
plt.title("dribbling & overall", fontsize = 18)
plt.show()

"""As players dribbling skill, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['defending'], y = df['overall'])
plt.xlabel("defending") 
plt.ylabel("overall")
plt.title("defending & overall", fontsize = 18)
plt.show()

"""As players defending skill, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['physic'], y = df['overall'])
plt.xlabel("physic") 
plt.ylabel("overall")
plt.title("physic & overall", fontsize = 18)
plt.show()

"""As players physic is more, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['attacking_crossing'], y = df['overall'])
plt.xlabel("attacking_crossing") 
plt.ylabel("overall")
plt.title("attacking_crossing & overall", fontsize = 18)
plt.show()

"""As players attacking_crossing , their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['attacking_finishing'], y = df['overall'])
plt.xlabel("attacking_finishing") 
plt.ylabel("overall")
plt.title("attacking_finishing & overall", fontsize = 18)
plt.show()

"""As players attacking finishing, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['attacking_heading_accuracy'], y = df['overall'])
plt.xlabel("attacking_heading_accuracy") 
plt.ylabel("overall")
plt.title("attacking_heading_accuracy & overall", fontsize = 18)
plt.show()

"""As players attacking_heading_accuracy, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['attacking_short_passing'], y = df['overall'])
plt.xlabel("attacking_short_passing") 
plt.ylabel("overall")
plt.title("attacking_short_passing & overall", fontsize = 18)
plt.show()

"""As players attacking_short_passing, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['attacking_volleys'], y = df['overall'])
plt.xlabel("attacking_volleys") 
plt.ylabel("overall")
plt.title("attacking_volleys & overall", fontsize = 18)
plt.show()

"""As players attacking_volleys, their FIFA Overall also increases in a higher slope."""

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['skill_dribbling'], y = df['overall'])
plt.xlabel("skill_dribbling") 
plt.ylabel("overall")
plt.title("skill_dribbling & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['skill_curve'], y = df['overall'])
plt.xlabel("skill_curve") 
plt.ylabel("overall")
plt.title("skill_curve & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['skill_fk_accuracy'], y = df['overall'])
plt.xlabel("skill_fk_accuracy") 
plt.ylabel("overall")
plt.title("skill_fk_accuracy & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['skill_long_passing'], y = df['overall'])
plt.xlabel("skill_long_passing") 
plt.ylabel("overall")
plt.title("skill_long_passing & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['skill_ball_control'], y = df['overall'])
plt.xlabel("skill_ball_control") 
plt.ylabel("overall")
plt.title("skill_ball_control & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['movement_acceleration'], y = df['overall'])
plt.xlabel("movement_acceleration") 
plt.ylabel("overall")
plt.title("movement_acceleration & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['movement_sprint_speed'], y = df['overall'])
plt.xlabel("movement_sprint_speed") 
plt.ylabel("overall")
plt.title("movement_sprint_speed & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['movement_agility'], y = df['overall'])
plt.xlabel("movement_agility") 
plt.ylabel("overall")
plt.title("movement_agility & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['movement_reactions'], y = df['overall'])
plt.xlabel("movement_reactions") 
plt.ylabel("overall")
plt.title("movement_reactions & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['movement_balance'], y = df['overall'])
plt.xlabel("movement_balance") 
plt.ylabel("overall")
plt.title("movement_balance & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['power_shot_power'], y = df['overall'])
plt.xlabel("power_shot_power") 
plt.ylabel("overall")
plt.title("power_shot_power & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['power_jumping'], y = df['overall'])
plt.xlabel("power_jumping") 
plt.ylabel("overall")
plt.title("power_jumping & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['power_stamina'], y = df['overall'])
plt.xlabel("power_stamina") 
plt.ylabel("overall")
plt.title("power_stamina & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['power_strength'], y = df['overall'])
plt.xlabel("power_strength") 
plt.ylabel("overall")
plt.title("power_strength & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['power_long_shots'], y = df['overall'])
plt.xlabel("power_long_shots") 
plt.ylabel("overall")
plt.title("power_long_shots & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['mentality_aggression'], y = df['overall'])
plt.xlabel("mentality_aggression") 
plt.ylabel("overall")
plt.title("mentality_aggression & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['mentality_interceptions'], y = df['overall'])
plt.xlabel("mentality_interceptions") 
plt.ylabel("overall")
plt.title("mentality_interceptions & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['mentality_positioning'], y = df['overall'])
plt.xlabel("mentality_positioning") 
plt.ylabel("overall")
plt.title("mentality_positioning & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['mentality_vision'], y = df['overall'])
plt.xlabel("mentality_vision") 
plt.ylabel("overall")
plt.title("mentality_vision & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['mentality_penalties'], y = df['overall'])
plt.xlabel("mentality_penalties") 
plt.ylabel("overall")
plt.title("mentality_penalties & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['defending_marking_awareness'], y = df['overall'])
plt.xlabel("defending_marking_awareness") 
plt.ylabel("overall")
plt.title("defending_marking_awareness & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['defending_standing_tackle'], y = df['overall'])
plt.xlabel("defending_standing_tackle") 
plt.ylabel("overall")
plt.title("defending_standing_tackle & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['defending_sliding_tackle'], y = df['overall'])
plt.xlabel("defending_sliding_tackle") 
plt.ylabel("overall")
plt.title("defending_sliding_tackle & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['goalkeeping_diving'], y = df['overall'])
plt.xlabel("goalkeeping_diving") 
plt.ylabel("overall")
plt.title("goalkeeping_diving & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['goalkeeping_handling'], y = df['overall'])
plt.xlabel("goalkeeping_handling") 
plt.ylabel("overall")
plt.title("goalkeeping_handling & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['goalkeeping_kicking'], y = df['overall'])
plt.xlabel("goalkeeping_kicking") 
plt.ylabel("overall")
plt.title("goalkeeping_kicking & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['goalkeeping_positioning'], y = df['overall'])
plt.xlabel("goalkeeping_positioning") 
plt.ylabel("overall")
plt.title("goalkeeping_positioning & overall", fontsize = 18)
plt.show()

plt.figure(figsize=(5, 3))
ax = sns.scatterplot(x =df['goalkeeping_reflexes'], y = df['overall'])
plt.xlabel("goalkeeping_reflexes") 
plt.ylabel("overall")
plt.title("goalkeeping_reflexes & overall", fontsize = 18)
plt.show()

c1 = columns[19:29]
c1

x = df[c1]
x

plt.style.use('fivethirtyeight')
ax = sns.countplot(x='nationality_name', data = df, order = df.nationality_name.value_counts().iloc[:10].index).set_title('Top 10 Most Common Countries')
plt.xticks(rotation='vertical')

"""Most of the players are from the country England."""

plt.style.use('fivethirtyeight')
ax = sns.countplot(x='league_name', data = df, order = df.league_name.value_counts().iloc[:10].index).set_title('Top 10 League with most players')
plt.xticks(rotation='vertical')

"""USA Major League Soccer has the most number of players playing."""

plt.figure(figsize=(10,4))
ax = sns.countplot(x='club_position', data = df, order = df['club_position'].value_counts().index)
ax.set_xlabel(xlabel = 'Player Position')
ax.set_ylabel(ylabel = 'Player Count')
ax.set_title(label = 'Player Positions in FIFA Database')
plt.xticks(rotation='vertical')

"""Most of the players are kept as substitutes."""

plt.figure(figsize = (20,10))
ax = sns.countplot(x = 'height_cm', data = df)
ax.set_title(label = 'Distribution of Player Heights')
ax.set_xlabel(xlabel = 'Player Height')
ax.set_ylabel(ylabel = 'Player Count')
plt.xticks(rotation='vertical')

"""The unnatural distribution (especially at 180) indicates that some rounding has occured."""

#Tallest Player
print("Tallest Players: ")
df.loc[df['height_cm'] == df['height_cm'].max()]

#Shortest Player
print("Shortest Player: ")
df.loc[df['height_cm'] == df['height_cm'].min()]

#skewness
df['height_cm'].skew()

plt.figure()
x=df.head(20)['height_cm']
y=df.head(20)['pace']

ax = sns.regplot(x='height_cm',y='pace', data=df)
plt.title('Height v Pace')
plt.xlabel('Height')
plt.ylabel('Pace')
plt.show()

"""Pace tends to decrease with increase in height."""

plt.figure(figsize = (20,10))
ax = sns.countplot(x = 'weight_kg', data = df)
ax.set_title(label = 'Distribution of Player Weights')
ax.set_xlabel(xlabel = 'Player Weight (kg)')
ax.set_ylabel(ylabel = 'Player Count')

"""This unnatural distribution (especially at 70 to 80) indicates that some rounding has occurred."""

plt.figure()
x=df.head(20)['weight_kg']
y=df.head(20)['pace']

ax = sns.regplot(x='weight_kg',y='pace', data=df)

plt.title('Weight v Pace')
plt.xlabel('Weight')
plt.ylabel('Pace')
plt.show()

"""Pace tends to decrease with increase in weight."""

plt.figure(figsize = (20,10))
ax = sns.countplot(x = 'age', data = df)
ax.set_title(label = 'Distribution of Player Ages')
ax.set_xlabel(xlabel = 'Player Age')
ax.set_ylabel(ylabel = 'Player Count')

"""Common age is in the range 20 to 29."""

#Oldest Player
print("Oldest Players: ")
df.loc[df['age'] == df['age'].max()]

#Youngest Player
print("Youngest Players: ")
df.loc[df['age'] == df['age'].min()]

#Skewness
df['age'].skew()

fig = go.Figure()

fig = go.Figure(data=go.Scatter(
    x = df['age'],
    y = df['overall'],
    mode='markers',
    marker=dict(
        color=df['overall'], 
        showscale=True
    ),
    text= df['short_name'],
))

fig.update_layout(title='Age vs Overall Rating',
                  xaxis_title='Age',
                  yaxis_title='Overall Rating')
fig.show()

"""
    No definite pattern is visible since the plot is vastly spread.
    While age doesnt linearly effect rating, some trends can be observed.
    Minimum rating generally increases with age.
    Maximum of rating first increases and then decreases, with peak at 34 (Messi).
"""

fig, ax = plt.subplots(figsize=(12, 5), tight_layout=True)

sns.histplot(df, x='overall', binwidth=1)

bins = np.arange(df['overall'].min(), df['overall'].max(), 1)
plt.xticks(bins)
plt.show()

"""It seems most players have a rating of 65 and 67."""

sns.distplot(df['overall'], bins=10, color='r')
plt.title("Distribution of Overall ratings of all Players")
plt.savefig("Distribution.png")
plt.show()

"""The overall rating of all players is a normal distribution."""

top_15 = df.nlargest(15, 'overall')
top_15.head(5)

# Let's see if high overall score correlates with earnings, for the top 15 players

fig, ax = plt.subplots(figsize=(8,5))

plt.scatter(top_15['potential'], top_15['wage_eur'] )
plt.text(top_15.iloc[0]['potential'], top_15.iloc[0]['wage_eur'], top_15.iloc[0]['short_name'])
# plt.text(top_15.iloc[1]['potential'], top_15.iloc[1]['wage_eur'], top_15.iloc[1]['short_name']) for better view
plt.text(top_15.iloc[2]['potential'], top_15.iloc[2]['wage_eur'], top_15.iloc[2]['short_name'])
# plt.text(top_15.iloc[3]['potential'], top_15.iloc[3]['wage_eur'], top_15.iloc[3]['short_name'])
plt.text(top_15.iloc[4]['potential'], top_15.iloc[4]['wage_eur'], top_15.iloc[4]['short_name'])
plt.text(top_15.iloc[5]['potential'], top_15.iloc[5]['wage_eur'], top_15.iloc[5]['short_name'])
plt.text(top_15.iloc[6]['potential'], top_15.iloc[6]['wage_eur'], top_15.iloc[6]['short_name'])
plt.text(top_15.iloc[7]['potential'], top_15.iloc[7]['wage_eur'], top_15.iloc[7]['short_name'])
plt.text(top_15.iloc[8]['potential'], top_15.iloc[8]['wage_eur'], top_15.iloc[8]['short_name'])
plt.text(top_15.iloc[9]['potential'], top_15.iloc[9]['wage_eur'], top_15.iloc[9]['short_name'])

ax.set_title("Potential vs Wages of top 15")
ax.set_ylabel('Wages in Eur')
ax.set_xlabel('Potential')

plt.show()

"""Among the top 15 players, we see that there's no relationship between potential & wages."""

# Quick calculation to separate players based on preferred foot

df.groupby(['preferred_foot']).count()[['sofifa_id']]

# Visualize with a pie, and include percentages using autopct

# Which foot does the footballers in fifa 21 use more?

preferred_foot_labels = df["preferred_foot"].value_counts().index # (Right,Left) 
preferred_foot_values = df["preferred_foot"].value_counts().values # (Right Values, Left Values)
explode = (0, 0.1) # used to separate the pie

# Visualize

plt.figure(figsize = (7,7))
plt.pie(preferred_foot_values, labels=preferred_foot_labels,autopct='%1.2f%%')
plt.title('Football Players Preferred Feet',color = 'black',fontsize = 15)
plt.legend()
plt.show()

"""Majority of football players are right footed."""

# Top 20 players overall

# We get the names and overals from the data
Overall = df["overall"]
footballer_name = df["short_name"]

# Let's create dataframe(Name,Overall)
data = pd.DataFrame({'short_name': footballer_name,'overall':Overall})

x = df['short_name'].head(20) 
y = df['overall'].head(20)

# plot
plt.figure(figsize=(7,10))


ax= sns.barplot(x=y, y=x, palette = 'Blues_r', orient='h')
plt.xticks()
plt.xlabel('Overall Ratings', size = 20) 
plt.ylabel('Player Names', size = 20 ) 
plt.title('FIFA22 Top 20 (Overall Rating)')

plt.show()

"""Messi is the best player."""

#shooting
player_shooting=df[['short_name','shooting']]

player_shooting.sort_values(by=['shooting'],ascending=False).head()

#Height vs Dribbling
plt.figure(figsize=(22,8))
plt.xlabel("Height",fontsize=20)
plt.ylabel("Dribbling",fontsize=20)
plt.title("Height vs Dribbling",fontsize=25)
sns.barplot(x='height_cm',y='dribbling',data=df.sort_values('height_cm',inplace=False))
plt.show()

"""Dribbling  tends to decrease with increase in height.

**Data Preprocessing**
"""

#checking duplicate
duplicate = df[df.duplicated()]
duplicate.shape

df = df.drop(['player_url','long_name','dob','club_team_id','club_name','league_name','league_level',
          'club_position','club_jersey_number','club_loaned_from',
          'club_joined','club_contract_valid_until','nationality_id',
          'nationality_name','nation_team_id','nation_position',
          'nation_jersey_number','preferred_foot','real_face','player_tags',
          'player_traits','player_face_url','club_logo_url','club_flag_url',
          'nation_logo_url','nation_flag_url'], axis=1)
df.head()

df.isnull().sum()

plt.subplots(figsize=(10,8))
sns.distplot(df.value_eur)

df["value_eur"].skew()

df['value_eur'] = df['value_eur'].fillna(df['value_eur'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.wage_eur)

df["wage_eur"].skew()

df['wage_eur'] = df['wage_eur'].fillna(df['wage_eur'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.pace)

df["pace"].skew()

df["pace"].median()

df['pace'] = df['pace'].fillna(df['pace'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.shooting)

df["shooting"].skew()

df["shooting"].median()

df['shooting'] = df['shooting'].fillna(df['shooting'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.passing)

df["passing"].skew()

df["passing"].median()

df['passing'] = df['passing'].fillna(df['passing'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.dribbling)

df["dribbling"].skew()

df["dribbling"].median()

df['dribbling'] = df['dribbling'].fillna(df['dribbling'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.defending)

df["defending"].skew()

df["defending"].median()

df['defending'] = df['defending'].fillna(df['defending'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.physic)

df["physic"].skew()

df["physic"].median()

df['physic'] = df['physic'].fillna(df['physic'].median())

plt.subplots(figsize=(10,8))
sns.distplot(df.goalkeeping_speed)

df["goalkeeping_speed"].skew()

df["goalkeeping_speed"].median()

df['goalkeeping_speed'] = df['goalkeeping_speed'].fillna(df['goalkeeping_speed'].median())

df.isnull().sum()

"""**Outliers**"""

#Potential
plt.subplots(figsize=(10,8))
sns.boxplot(df.potential)

q3, q1 = np.percentile(df['potential'], [75 ,25])
iqr = float(q3 - q1)

def q3Iqr(col):
    return np.quantile(col, 0.75)

def q1Iqr(col):
    return np.quantile(col, 0.25)

def Iqr(q3,q1):
    return float(q3 - q1)

def upper(x):
   return q3Iqr(x)+1.5*iqr

def lower(x):
   return q1Iqr(x)-1.5*iqr

def replace_outlier(x):
    df[x] = np.where(
    df[x] > upper(df[x]),
    upper(df[x]),
    np.where(
        df[x] < lower(df[x]),
        lower(df[x]),
        df[x]
    )
)

replace_outlier('potential')

plt.subplots(figsize=(5,4))
sns.boxplot(df.potential)

def find_outliers_IQR(df):
   q1=df.quantile(0.25)
   q3=df.quantile(0.75)
   IQR=q3-q1
   outliers = df[((df<(q1-1.5*IQR)) | (df>(q3+1.5*IQR)))]
   return outliers

outliers = find_outliers_IQR(df['potential'])

def drop_outliers_IQR(df):
   q1=df.quantile(0.25)
   q3=df.quantile(0.75)
   IQR=q3-q1
   not_outliers = df[~((df<(q1-1.5*IQR)) | (df>(q3+1.5*IQR)))]
   outliers_dropped = not_outliers.dropna().reset_index()
   return outliers_dropped

drop_outliers_IQR(df['potential']).count()

"""**One** **hot** **encoding**

"""

dummies = df.player_positions.str.split('\s*,\s*', expand=True).stack().str.get_dummies().sum(level=0)

df = pd.concat([df, dummies], axis=1)

df.head()

def draw_box_plot(x):
    plt.subplots(figsize=(3,3))
    sns.boxplot(df[x])

def draw_dist_plot(x):
    plt.subplots(figsize=(3,3))
    sns.distplot(df[x])

df2 = df[['attacking_crossing','attacking_finishing','attacking_heading_accuracy','attacking_short_passing',
         'attacking_volleys','skill_dribbling','skill_curve','skill_fk_accuracy','skill_long_passing',
         'skill_ball_control','movement_acceleration','movement_sprint_speed','movement_agility', 'movement_reactions', 'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure', 'defending_marking_awareness', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes']]
df2.head()

for i in df2:
    draw_dist_plot(i)

for i in df2:
    replace_outlier(i)

df3 = df[['attacking_crossing','attacking_finishing','attacking_heading_accuracy','attacking_short_passing',
         'attacking_volleys','skill_dribbling','skill_curve','skill_fk_accuracy','skill_long_passing',
         'skill_ball_control','movement_acceleration','movement_sprint_speed','movement_agility', 'movement_reactions', 'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure', 'defending_marking_awareness', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes']]
df3.head()

for i in df3:
    draw_box_plot(i)

for i in df3:
    draw_dist_plot(i)

"""**ANOVA** **test** **for** **finding** **relationship** **between** **player** **position** **and** **overall**"""

from scipy.stats import f_oneway
CategoryGroupLists=df.groupby('player_positions')['overall'].apply(list)
AnovaResults = f_oneway(*CategoryGroupLists)
print('P-Value for Anova is: ', AnovaResults[1])

df = df.drop(['release_clause_eur','player_positions'],axis=1)
df.head()

y= df['overall']
x = df.drop(['overall','sofifa_id','short_name','work_rate','body_type'],axis=1)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y,random_state=100, test_size=0.3)

"""**Using** **pearson** **correlation**"""

cor = X_train.corr()
plt.figure(figsize=(52,40))
sns.heatmap(cor, cmap=plt.cm.CMRmap_r,annot=True)
plt.show()

def correlation(dataset, threshold):
    col_corr = set()
    corr_matrix = dataset.corr()
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if abs(corr_matrix.iloc[i, j]) > threshold:
                colname = corr_matrix.columns[i]
                col_corr.add(colname)
    return col_corr

corr_features = correlation(X_train, 0.9)
corr_features

"""**Chi** **Square**"""

from sklearn.feature_selection import chi2

f_p_values=chi2(X_train,y_train)
f_p_values

p_values=pd.Series(f_p_values[1])
p_values.index=X_train.columns
p_values
p_values.sort_index(ascending=False)

"""**Mutual** **Information** **Gain**"""

from sklearn.feature_selection import mutual_info_classif
mutual_info = mutual_info_classif(X_train, y_train)
mutual_info

mutual_info = pd.Series(mutual_info)
mutual_info.index = X_train.columns
mutual_info.sort_values(ascending=False)

from sklearn.datasets import make_regression
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_regression

# define feature selection
fs = SelectKBest(score_func=f_regression, k=35)

# apply feature selection
X_selected = fs.fit_transform(x, y)
print(X_selected.shape)

X_selected

filter = fs.get_support()
vector_names = list(x.columns[fs.get_support(indices=True)])
print(vector_names)

df.head()

from scipy.stats import pearsonr
corr, _ = pearsonr(df['value_eur'], df['overall'])
print('Pearsons correlation: %.3f' % corr)

corr, _ = pearsonr(df['wage_eur'], df['overall'])
print('Pearsons correlation: %.3f' % corr)

"""**Work** **rate** **vs** **Overall**"""

from scipy.stats import f_oneway
CategoryGroupLists=df.groupby('work_rate')['overall'].apply(list)
AnovaResults = f_oneway(*CategoryGroupLists)
print('P-Value for Anova work_rate is: ', AnovaResults[1])

"""**Body** **type** **vs** **Overall**"""

from scipy.stats import f_oneway
CategoryGroupLists=df.groupby('body_type')['overall'].apply(list)
AnovaResults = f_oneway(*CategoryGroupLists)
print('P-Value for Anova body_type is: ', AnovaResults[1])

df = df.drop(['sofifa_id','short_name','work_rate','body_type'],axis=1)

df.drop("overall", axis=1).apply(lambda x: x.corr(df.overall)).sort_values(ascending=False)

df_model = df[['overall','wage_eur','value_eur','potential','attacking_crossing','attacking_finishing','attacking_heading_accuracy','attacking_short_passing',
         'attacking_volleys','skill_dribbling','skill_curve','skill_fk_accuracy','skill_long_passing',
         'skill_ball_control','movement_acceleration','movement_sprint_speed','movement_agility', 'movement_reactions', 'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure', 'defending_marking_awareness', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes']]

Y= df_model['overall']
X = df_model.drop(['overall'],axis=1)

X_train_data, X_test_data, y_train_data, y_test_data = train_test_split(X, Y,random_state=100, test_size=0.3)

"""**Random** **Forest** **Regression**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
forest_reg = RandomForestRegressor()
forest_reg.fit(X_train_data, y_train_data)
y_predictions = forest_reg.predict(X_test_data)
forest_mse = mean_squared_error(y_test_data, y_predictions)
forest_rmse = np.sqrt(forest_mse)
forest_rmse

"""**Decision** **Tree**"""

from sklearn.tree import DecisionTreeRegressor
regr = DecisionTreeRegressor(max_depth=2)
regr.fit(X_train_data, y_train_data)
ypred = regr.predict(X_test_data)
mse = mean_squared_error(y_test_data, ypred)
rmse= np.sqrt(mse)
rmse

"""**Support** **Vector**"""

from sklearn.svm import SVR
svr = SVR().fit(X_train_data,y_train_data)
ysvrpred = svr.predict(X_test_data)
mse_svr = mean_squared_error(y_test_data, ysvrpred)
rmse_svr= np.sqrt(mse_svr)
rmse_svr

"""Lasso Regressor"""

from sklearn import linear_model
lassoReg = linear_model.Lasso(alpha=0.1)
lassoReg.fit(X_train_data,y_train_data)
ylassopred = lassoReg.predict(X_test_data)
mse_lasso = mean_squared_error(y_test_data, ylassopred)
rmse_lasso= np.sqrt(mse_lasso)
rmse_lasso

"""**Polynomial**"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
poly_regs= PolynomialFeatures(degree= 2)  
x_poly= poly_regs.fit_transform(X_train_data)  
lin_reg_2 =LinearRegression()  
lin_reg_2.fit(x_poly, y_train_data)  
y_pred = lin_reg_2.predict(poly_regs.fit_transform(X_test_data))
mse = mean_squared_error(y_test_data, y_pred)
rmse = np.sqrt(mse)
rmse

"""**Gradient** **Boosting**"""

from sklearn.ensemble import GradientBoostingRegressor
gbr = GradientBoostingRegressor(n_estimators=600,max_depth=5,learning_rate=0.01,min_samples_split=3)
gbr = GradientBoostingRegressor()
gbr.fit(X_train_data, y_train_data)
ypred = gbr.predict(X_test_data)
mse = mean_squared_error(y_test_data,ypred)
rmse = np.sqrt(mse)
rmse

"""Random Forest Regression chosen as the final model for predicting the player ratings. Because it has least RMSE (1.10).

"""

import pickle
model_pkl = open('model7.pkl','wb')
pickle.dump(forest_reg,model_pkl)
model_pkl.close()